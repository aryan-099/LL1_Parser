# ✅ LL(1) Compatible Grammars

# Test Case 1: Arithmetic Expressions
# LL(1) - 💬 No left recursion
#  Input: ( id + id ) * id
#  Valid
rules1 = [
    "E -> T A",
    "A -> + T A | #",
    "T -> F B",
    "B -> * F B | #",
    "F -> ( E ) | id"
]
nonterm1 = ['E', 'A', 'T', 'B', 'F']
term1 = ['+', '*', '(', ')', 'id']
input1 = "( id + id ) * id"
print("----- Test Case 1 -----")
test_grammar(rules1, nonterm1, term1, input1)

# Test Case 4: While Loop
# ✅ LL(1) - 💬 No left recursion
# 📥 Input: while id do id
# 🟩 Valid
rules4 = [
    "S -> while E do S | id",
    "E -> id"
]
nonterm4 = ['S', 'E']
term4 = ['while', 'do', 'id']
input4 = "while id do id"
print("----- Test Case 4 -----")
test_grammar(rules4, nonterm4, term4, input4)

# Test Case 6: Exponentiation and Multiplication
# ✅ LL(1) - 💬 No left recursion
# 📥 Input: id ^ id * id
# 🟩 Valid
rules6 = [
    "E -> T E'",
    "E' -> ^ T E' | #",
    "T -> F T'",
    "T' -> * F T' | #",
    "F -> ( E ) | id"
]
nonterm6 = ['E', "E'", 'T', "T'", 'F']
term6 = ['^', '*', '(', ')', 'id']
input6 = "id ^ id * id"
print("----- Test Case 6 -----")
test_grammar(rules6, nonterm6, term6, input6)

# Test Case 8: Palindromes Over {a,b}
# ✅ LL(1) - 💬 No left recursion
# 📥 Input: a b b a
# 🟩 Valid
rules8 = [
    "S -> a S a | b S b | a | b | #"
]
nonterm8 = ['S']
term8 = ['a', 'b']
input8 = "a b b a"
print("----- Test Case 8 -----")
test_grammar(rules8, nonterm8, term8, input8)

# Test Case 10: Simple Function Calls
# ✅ LL(1) - 💬 No left recursion
# 📥 Input: id ( id , id )
# 🟩 Valid
rules10 = [
    "S -> id ( A )",
    "A -> id , A | id | #"
]
nonterm10 = ['S', 'A']
term10 = ['id', '(', ')', ',']
input10 = "id ( id , id )"
print("----- Test Case 10 -----")
test_grammar(rules10, nonterm10, term10, input10)


# ❌ Non-LL(1) or Problematic Grammars

# Test Case 2: Assignment with Left Recursion
# ❌ Not LL(1) - 💬 Left recursion in E -> E + T
# 📥 Input: id = id + id
# 🟩 Valid (but only if parser supports left recursion)
rules2 = [
    "S -> id = E",
    "E -> E + T | T",
    "T -> id"
]
nonterm2 = ['S', 'E', 'T']
term2 = ['id', '=', '+']
input2 = "id = id + id"
print("----- Test Case 2 -----")
test_grammar(rules2, nonterm2, term2, input2)

# Test Case 3: If-Else (Ambiguous)
# ❌ Not LL(1) - 💬 FIRST/FOLLOW conflict (dangling else)
# 📥 Input: if id then id else id
# 🟩 Valid (but ambiguity means it's not LL(1) safe)
rules3 = [
    "S -> if E then S else S | id",
    "E -> id"
]
nonterm3 = ['S', 'E']
term3 = ['if', 'then', 'else', 'id']
input3 = "if id then id else id"
print("----- Test Case 3 -----")
test_grammar(rules3, nonterm3, term3, input3)

# Test Case 5: Boolean Expressions
# ❌ Not LL(1) - 💬 Left recursion in E -> E or T and T -> T and F
# 📥 Input: not id and id or id
# 🟩 Valid (in general, but not safe under LL(1))
rules5 = [
    "S -> E",
    "E -> E or T | T",
    "T -> T and F | F",
    "F -> not F | ( E ) | id"
]
nonterm5 = ['S', 'E', 'T', 'F']
term5 = ['or', 'and', 'not', '(', ')', 'id']
input5 = "not id and id or id"
print("----- Test Case 5 -----")
test_grammar(rules5, nonterm5, term5, input5)

# Test Case 7: List Grammar (Left Recursion)
# ❌ Not LL(1) - 💬 Left recursion in L -> id , L
# 📥 Input: id , id , id
# 🟩 Valid (structure-wise, but not LL(1)-safe)
rules7 = [
    "L -> id , L | id"
]
nonterm7 = ['L']
term7 = ['id', ',']
input7 = "id , id , id"
print("----- Test Case 7 -----")
test_grammar(rules7, nonterm7, term7, input7)

# Test Case 9: Arithmetic with + and -
# ❌ Not LL(1) - 💬 Left recursion in E -> E + T | E - T
# 📥 Input: id + id - id
# 🟩 Valid (but again, not parseable via LL(1))
rules9 = [
    "E -> E + T | E - T | T",
    "T -> id"
]
nonterm9 = ['E', 'T']
term9 = ['+', '-', 'id']
input9 = "id + id - id"
print("----- Test Case 9 -----")
test_grammar(rules9, nonterm9, term9, input9)
